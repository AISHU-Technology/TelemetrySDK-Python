# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run unitest, deploy, and more:
# https://aka.ms/yaml

# 触发管道
trigger:
  batch: true
  branches:
    include:
      - "feature-*"
      - "feature/*"
      - "develop"
      - "release-*"
      - "release/*"

variables:
  - group: anyrobot-global-config
  - name: BUILD_IMAGE
    value: "acr.aishu.cn/public/mikefarah/yq:4.26.1"
  - name: SONARQUBE_IMAGE
    value: "acr.aishu.cn/public/sonarsource/sonar-scanner-cli:4.7"
  - name: LintReportName # 此行保持一致
    value: lint_report.xml
  - name: UTReportName # 此行保持一致
    value: ut_report.xml
  - name: CoverageReportName # 此行保持一致
    value: coverage_report.xml

resources:
  containers:
    - container: dotnet
      endpoint: acr-registry
      image: dotnet/runtime:3.1-bullseye-slim

stages:
  - stage: CodeCheck
    displayName: 代码检查
    jobs:
#      - job: _1CodeCheck
#        displayName: 1.代码检查(UT/Lint)
#        workspace:
#          clean: all
#        pool:
#          name: telemetrySDK-pool
#          demands:
#            - docker
#        steps:
#          - checkout: self
#          - task: Bash@3
#            displayName: 单元测试
#            inputs:
#              targetType: 'inline'
#              script: |
#                #!/usr/bin/env bash
#                set -ex
#
#                docker run --rm \
#                      -v $(pwd):/TelemetrySDK-Python \
#                      -v /root/.ssh/id_rsa:/root/.ssh/id_rsa \
#                      $(BUILD_IMAGE) bash -c
#                  "
#                  set -ex
#
#                  echo machine devops.aishu.cn login AnyRobot password $(System.AccessToken) > ~/.netrc
#                  cd /TelemetrySDK-Python
#                  mkdir -p /TelemetrySDK-Python/report
#                  touch report/$(UTReportName)
#                  touch report/$(CoverageReportName)
#                  touch report/$(LintReportName)
#                  "
#
#          - task: PublishBuildArtifacts@1  # 将相应目录publish到artifact
#            inputs:
#              PathtoPublish: '$(Build.SourcesDirectory)/event/report'
#              ArtifactName: CodeCheckReportFiles1
#
#          - task: Post-Bash@3
#            inputs:
#              targetType: inline
#              script: |
#                rm -rf $(Build.SourcesDirectory)
#
#      - job: _2UploadReport
#        displayName: 2.上传检查报告
#        container: dotnet
#        dependsOn: _1CodeCheck
#        pool:
#          name: telemetrySDK-pool
#          demands:
#            - docker
#        steps:
#          - task: DownloadBuildArtifacts@0
#            inputs:
#              artifactName: CodeCheckReportFiles1
#              downloadPath: $(Build.BinariesDirectory)
#
#          - task: PublishTestResults@2
#            displayName: 发布Lint测试报告
#            inputs:
#              testResultsFormat: 'JUnit'
#              testResultsFiles: '$(Build.BinariesDirectory)/CodeCheckReportFiles1/$(LintReportName)'
#              testRunTitle: 'Lint Result'
#              failTaskOnFailedTests: false
#
#          - task: BuildQualityChecks@8         # 此行保持一致  Lint卡点
#            displayName: Quality Gate Lint     # 此行保持一致
#            inputs:
#              checkWarnings: true              # 此行保持一致
#              warningFailOption: 'fixed'
#              warningThreshold: '0'
#              showStatistics: false
#              evaluateTaskWarnings: false
#              evaluateFileWarnings: true
#              warningFilesFolder: '$(Build.BinariesDirectory)/CodeCheckReportFiles1'
#              warningFiles: '**/$(LintReportName)'    # 此行保持一致
#              warningFileFilters: '/^.+<\/failure>.*?$/'
#              warningFilesArtifact: 'CodeCheckReportFiles1'
#
#          - task: PublishTestResults@2
#            displayName: 发布UT测试报告
#            inputs:
#              testResultsFormat: 'JUnit'
#              testResultsFiles: '$(Build.BinariesDirectory)/CodeCheckReportFiles1/$(UTReportName)'
#              testRunTitle: 'UT Result'
#              failTaskOnFailedTests: false
#
#          - task: BuildQualityChecks@8           # 此行保持一致     # UT卡点
#            displayName: Quality Gate UT         # 此行保持一致
#            inputs:
#              checkWarnings: true                # 此行保持一致
#              warningFailOption: 'fixed'
#              warningThreshold: '0'
#              showStatistics: false
#              evaluateTaskWarnings: false
#              evaluateFileWarnings: true
#              warningFilesFolder: '$(Build.BinariesDirectory)/CodeCheckReportFiles1'
#              warningFiles: '**/$(UTReportName)'    # 此行保持一致
#              warningFileFilters: '/^.+<\/failure>.*?$/'
#              warningFilesArtifact: 'CodeCheckReportFiles1'
#
#          - task: PublishCodeCoverageResults@1
#            displayName: 发布UT测试覆盖率报告
#            inputs:
#              codeCoverageTool: 'Cobertura'
#              summaryFileLocation: '$(Build.BinariesDirectory)/CodeCheckReportFiles1/$(CoverageReportName)'
#
#          - task: BuildQualityChecks@8           # 此行保持一致 代码覆盖率卡点
#            displayName: Quality Gate Coverage   # 此行保持一致
#            inputs:
#              coverageType: 'lines'              # 代表行覆盖率
#              coverageFailOption: 'fixed'
#              checkCoverage: true                # 此行保持一致
#              coverageThreshold: '0.0'          # 代码覆盖率卡点阈值
#
#          - task: Post-Bash@3
#            inputs:
#              targetType: inline
#              script: |
#                rm -rf $(Build.SourcesDirectory)

      - job: _3UploadSonarQube
        displayName: 3.上传SonarQube
#        dependsOn: _2UploadReport
        workspace:
          clean: all
        pool:
          name: telemetrySDK-pool
          demands:
            - docker
        steps:
          - checkout: self
#          - task: DownloadBuildArtifacts@0
#            inputs:
#              artifactName: CodeCheckReportFiles1
#              downloadPath: $(Build.SourcesDirectory)

          - task: Bash@3
            displayName: 上传SonarQube
            inputs:
              targetType: 'inline'
              script: |
                #!/usr/bin/env bash
                set -ex

                APP_NAME="TelemetrySDK-Python"
                INCLUSION_DIR=""
                EXCLUSION_DIR="**/errors/**,**/examples/**"
                GLOBAL_EXCLUSION_DIR="**/report/**"

                docker run --rm \
                        -u root:root \
                        -v $(pwd):/TelemetrySDK-Python \
                        $(SONARQUBE_IMAGE) bash -c "
                    set -ex

                    cd /TelemetrySDK-Python
                    sonar-scanner \
                      -D sonar.host.url=$(sonarqube.server) \
                      -D sonar.projectKey=${APP_NAME} \
                      -D sonar.branch.name=$(Build.SourceBranchName) \
                      -D sonar.sources=. \
                      -D sonar.sonar.inclusions=${INCLUSION_DIR} \
                      -D sonar.coverage.exclusions=${EXCLUSION_DIR} \
                      -D sonar.cpd.exclusions=${EXCLUSION_DIR} \
                      -D sonar.global.exclusions=${GLOBAL_EXCLUSION_DIR} \
                      -D sonar.language=py \
                      -D sonar.login=$(sonarqube.token)
                    "
          - task: Post-Bash@3
            inputs:
              targetType: 'inline'
              script: |
                rm -rf $(Build.SourcesDirectory)
